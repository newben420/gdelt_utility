# PORT
# NUMERIC VALUE.
# THE PORT YOU WANT YOUR NODEJS APPLICATION TO RUN ON E.G. 3000, 30001, 4000 - 65000.
PORT="3000"

# MODE
# MODE OF THE APPLICATION. VALUE CAN EITHER BE "PROD" OR "DEV".
# "PROD"IS YOUR DEFAULT VALUE. DO NOT USE "DEV" UNLESS YOU ARE TRYING TO DEBUG THE APPLICATION.
# "DEV" OUTPUTS ERRORS TO THE CONSOLE.
MODE="PROD"

# DBDIR
# THE DIRECTORY IN THE APPLICATION ROOT WHERE THE JSON DATABASE FILES ARE STORED.
# THERE IS NOT NEED TO CHANGE THIS.
DBDIR="database"

# BRAND
# IT IS TRUNCATED TO 20 CHARACTERS, IF MORE CHARACTERS ARE PRESENT.
# IS IT DISPLAYED IN THE HEADER OF THE UI AND WHEN STARTNG THE APPLICATION, THE APPLICATION CONSOLE.
BRAND="GDELT UTILITY"

# TIMEZONE SETTINGS
# STRICTLY IN THE CASE SENSITIVE FORMAT UTC+/-D e.g UTC+1,UTC-1, UTC+0, UTC+10.
# THIS HELPS IN ALLIGNING YOUR TIME TO GDELT'S UTC TIME IN THE BACKGROUND WHEN FETCHING ARTICLES.
TIMEZONE_SET="UTC+1"


# GDELT CONFIG
# FOR MORE INFO -VISIT https://blog.gdeltproject.org/gdelt-doc-2-0-api-debuts/

# SOURCE COUNTRY - THE COUNTRY WHERE THE ARTICLES TO BE FETCHED ARE ORIGINATING FROM.
# LEAVE IT EMPTY FOR ARTICLES TO BE FETCHED FROM ANY COUNTRY, GLOBALLY.
# TO SPECIFY MULTIPLE COUNTRIES, SEPARATE THEM BY A SINGLE SPACE, E.G. "nigeria ghana ukraine".
GD_COUNTRY="nigeria"

# SOURCE LANGUAGE - THE LAUNGUAGE IN WHICH ARTICLES TO BE FECTHED ARE WRITTEN.
# LEAVE IT EMPTY FOR ARTICLES TO BE FETCHED IN ANY LANGUAGE.
# TO SPECIFY MULTIPLE LANGUAGES, SEPARATE THEM BY A SINGLE SPACE, e.g. "english hindi french".
GD_LANGUAGE="english"

# DOMAINS - DOMAINS FROM WHICH ARTICLES ARE FETCHED. e.g. "cnn.com" TO FETCH ARTICLES FROM ONLY CNN.
# LEAVE IT EMPTY FOR ARTICLES TO BE FETCHED FROM ANY DOMAIN WITHIN SOURCE COUNTRY(IES).
# TO SPECIFY MULTIPLE DOMAINS, SEPARATE THEM BY A SINGLE SPACE, E.G. "bbc.co.uk cnn.com".
# NOTE THAT DOMAINS WHO ARE SUPERSTRINGS OF SPECIFIED DOMAINS WOULD BE USED AS WELL.
GD_DOMAINS=""

# DO NOT CHANGE THIS UNDER ANY CIRCUMSTANCE, UNLESS, THE URL FOR GDELT2.0 CHANGES.
GD_BASE_URL="https://api.gdeltproject.org/api/v2/doc/doc"

# DO NOT CHANGE THIS UNDER ANY CIRCUMSTANCE.
# YOUR APPLICATION WILL MALFUNCTION IF THIS IS CHANGED.
GD_MODE="artlist"

# DO NOT CHANGE THIS UNDER ANY CIRCUMSTANCE.
# YOUR APPLICATION WILL MALFUNCTION IF THIS IS CHANGED.
GD_FORMAT="json"

# THERE IS NO NEED TO CHANGE THIS, UNLESS YOU WANT TO CHANGE THE SORTING OF ARTICLES WHEN YOU FETCH THEM.
# POSSIBLE VALUES ARE: 
# datedesc - SORT BY DATETIME IN DESCENDING ORDER.
# dateasc - SORT BY DATETIME IN ASCENDING ORDER.
# toneasc - SORT BY TONE IN ASCENDING ORDER, DISPLAY THE MOST POSITIVE ARTICLES FIRST.
# tonedesc - SORT BY TONE IN DESCENDING ORDER, DISPLAY THE MOST NEGATIVE ARTICLES FIRST.
# hybridrel - A MODERN SORTING ORDER. SIMPLY TO DISPLAY THE MOST RELEVANT/POPULAR ARTICLES FIRST.
GD_SORT="datedesc"

# MAX RECORDS - NUMERIC VALUE BETWEEN 1 AND 250.
# SETS MAXIMUM NUMBER OF ARTICLES TO FETCH DURING A QUERY/FETCH ACTION.
GD_MAX_ARTICLES="100"

# HTTP TIMEOUT IN MILLISECONDS.
# REQUEST FAILS IF RESPONSE FROM GDELT SERVER IS NOT RECEIVED WITHIN THE SPECIFIED TIMEOUT VALUE.
# THIS ALSO SERVES AS THE TIMEOUT WHEN EXTRACTING BODY FROM URL OF ARTICLE, AND WHEN USING THE SUMMARIZATION API
# 20000 - 60000 IS RECOMMENDED.
GD_FETCH_TIMEOUT_MILLISEC="60000"


# CONTENT AND SUMMARIZATION SETTINGS

# MAX TOKENS
# THE MAXIMUM NUMBER OF TOKENS ALLOWED IN ARTICLE BODY THAT CAN BE PASSED TO CONFIGURED SUMMARIZATION API
# A WARNING WILL BE SHOWN IN UI IF BODY'S TOKENS EXCEED THIS
MAX_TOKENS="500"

# MAX TOKENS STRICT
# POSSIBLE VALUES ARE "YES" AND "NO"
# IF SET TO "NO", BODY CAN STILL BE PASSED TO SUMMARIZATION API IF TOKENS EXCEED MAX.
# IF SET TO "YES", BODY CANNOT BE PASSED TO SUMMARIZATION API IF TOKENS EXCEED MAX.
MAX_TOKENS_STRICT="YES"

# SUMMARY API URL
# YOU CAN GET SOME SUMMARIZATION API OR SETUP YOURS LOCALLY, OR AN INTERFACE BETWEEN THIS AND YOUR API
# THIS IS THE URL WHERE THE BODY OF THE ARTICLE IS SENT AND SUMMARY IS RECEIVED
# FROM THIS APPLICATION, IT IS ASSUMED TO ACCEPT A JSON OBJECT IN THE FORMAT {"text": "<<your_article_body>>"}
# IF SUCCESSFUL, IT IS ASSUMED TO RETURN A JSON IN THE FORMAT {"summary": "<<summarized_body>>"}
# IF AN ERROR IS ENCOUNTERED, IT IS ASSUMED TO RETURN A JSON IN THE FORMAT {"error": "<error_message>"}
SUMMARY_API_URL="http://localhost:5000/summarize"